using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using {{namespace}}.Domain.Entities;
using {{namespace}}.Domain.Repositories;
using {{namespace}}.Infrastructure.Data;

namespace {{namespace}}.Infrastructure.Repositories
{
    public class {{entityName}}Repository : I{{entityName}}Repository
    {
        private readonly {{namespace}}DbContext _context;

        public {{entityName}}Repository({{namespace}}DbContext context)
        {
            _context = context;
        }

        public async Task<{{entityName}}> GetByIdAsync(int id)
        {
            return await _context.{{entityName}}s
                .Include(e => e.RelatedEntities)
                .FirstOrDefaultAsync(e => e.Id == id);
        }

        public async Task<IReadOnlyList<{{entityName}}>> GetAllAsync()
        {
            return await _context.{{entityName}}s
                .Include(e => e.RelatedEntities)
                .ToListAsync();
        }

        public async Task<{{entityName}}> AddAsync({{entityName}} entity)
        {
            _context.{{entityName}}s.Add(entity);
            await _context.SaveChangesAsync();
            return entity;
        }

        public async Task UpdateAsync({{entityName}} entity)
        {
            _context.Entry(entity).State = EntityState.Modified;
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync({{entityName}} entity)
        {
            _context.{{entityName}}s.Remove(entity);
            await _context.SaveChangesAsync();
        }

        public async Task<bool> ExistsAsync(int id)
        {
            return await _context.{{entityName}}s.AnyAsync(e => e.Id == id);
        }

        {{#each customMethods}}
        public async Task<{{returnType}}> {{name}}Async({{parameters}})
        {
            {{methodBody}}
        }
        {{/each}}
    }
} 